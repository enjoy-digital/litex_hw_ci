From 4181775dffe50ba7d6c8dd5fef6e33abf376528c Mon Sep 17 00:00:00 2001
From: Robert Winkler <rwinkler@internships.antmicro.com>
Date: Tue, 22 Dec 2020 16:29:47 -0500
Subject: [PATCH 08/19] LiteX: driver for I2CMaster

Original author: Robert Winkler <rwinkler@internships.antmicro.com>
DT bindings and documentation: Geert Uytterhoeven <geert@linux-m68k.org>

Signed-off-by: Robert Winkler <rwinkler@internships.antmicro.com>
Signed-off-by: Geert Uytterhoeven <geert@linux-m68k.org>

FIXME: not updated or tested for 32-bit CSR data width, 64-bit CPU (gls)
---
 .../devicetree/bindings/i2c/litex,i2c.yaml    |  37 +++++
 drivers/i2c/busses/Kconfig                    |   7 +
 drivers/i2c/busses/Makefile                   |   1 +
 drivers/i2c/busses/i2c-litex.c                | 156 ++++++++++++++++++
 4 files changed, 201 insertions(+)
 create mode 100644 Documentation/devicetree/bindings/i2c/litex,i2c.yaml
 create mode 100644 drivers/i2c/busses/i2c-litex.c

diff --git a/Documentation/devicetree/bindings/i2c/litex,i2c.yaml b/Documentation/devicetree/bindings/i2c/litex,i2c.yaml
new file mode 100644
index 000000000000..50780c121a3a
--- /dev/null
+++ b/Documentation/devicetree/bindings/i2c/litex,i2c.yaml
@@ -0,0 +1,37 @@
+# SPDX-License-Identifier: (GPL-2.0-only OR BSD-2-Clause)
+%YAML 1.2
+---
+$id: http://devicetree.org/schemas/i2c/litex,i2c.yaml#
+$schema: http://devicetree.org/meta-schemas/core.yaml#
+
+title: LiteX I2C controller
+
+maintainers:
+  - Robert Winkler <rwinkler@internships.antmicro.com>
+
+allOf:
+  - $ref: /schemas/i2c/i2c-controller.yaml#
+
+properties:
+  compatible:
+    const: litex,i2c
+
+  reg:
+    maxItems: 1
+
+required:
+  - compatible
+  - reg
+  - '#address-cells'
+  - '#size-cells'
+
+unevaluatedProperties: false
+
+examples:
+  - |
+    i2c@f0003000 {
+            compatible = "litex,i2c";
+            reg = <0xf0003000 0x5>;
+            #address-cells = <1>;
+            #size-cells = <0>;
+    };
diff --git a/drivers/i2c/busses/Kconfig b/drivers/i2c/busses/Kconfig
index 28eb48dd5b32..819fd76545d9 100644
--- a/drivers/i2c/busses/Kconfig
+++ b/drivers/i2c/busses/Kconfig
@@ -762,6 +762,13 @@ config I2C_KEMPLD
 	  This driver can also be built as a module. If so, the module
 	  will be called i2c-kempld.
 
+config I2C_LITEX
+	tristate "LiteX I2C support"
+	depends on OF && HAS_IOMEM && LITEX_SOC_CONTROLLER
+	select I2C_ALGOBIT
+	help
+	  This enables I2C bitbang driver for LiteX SoC builder.
+
 config I2C_LPC2K
 	tristate "I2C bus support for NXP LPC2K/LPC178x/18xx/43xx"
 	depends on OF && (ARCH_LPC18XX || COMPILE_TEST)
diff --git a/drivers/i2c/busses/Makefile b/drivers/i2c/busses/Makefile
index aa0ee8ecd6f2..ec7560aef59b 100644
--- a/drivers/i2c/busses/Makefile
+++ b/drivers/i2c/busses/Makefile
@@ -76,6 +76,7 @@ obj-$(CONFIG_I2C_IMX_LPI2C)	+= i2c-imx-lpi2c.o
 obj-$(CONFIG_I2C_IOP3XX)	+= i2c-iop3xx.o
 obj-$(CONFIG_I2C_JZ4780)	+= i2c-jz4780.o
 obj-$(CONFIG_I2C_KEMPLD)	+= i2c-kempld.o
+obj-$(CONFIG_I2C_LITEX)		+= i2c-litex.o
 obj-$(CONFIG_I2C_LPC2K)		+= i2c-lpc2k.o
 obj-$(CONFIG_I2C_LS2X)		+= i2c-ls2x.o
 obj-$(CONFIG_I2C_MESON)		+= i2c-meson.o
diff --git a/drivers/i2c/busses/i2c-litex.c b/drivers/i2c/busses/i2c-litex.c
new file mode 100644
index 000000000000..7723a59a5ba3
--- /dev/null
+++ b/drivers/i2c/busses/i2c-litex.c
@@ -0,0 +1,156 @@
+// SPDX-License-Identifier: GPL-2.0
+/*
+ * Copyright (C) 2019 Antmicro <www.antmicro.com>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2
+ * as published by the Free Software Foundation.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+#include <linux/module.h>
+#include <linux/platform_device.h>
+#include <linux/of.h>
+#include <linux/i2c.h>
+#include <linux/i2c-algo-bit.h>
+#include <linux/bits.h>
+#include <linux/litex.h>
+
+#define REGISTER_SIZE           1
+#define OFFSET_REG_W            0x0
+#define OFFSET_REG_R            0x4
+
+#define BITPOS_SCL              0
+#define BITPOS_SDA_DIR          1
+#define BITPOS_SDA_W            2
+#define BITPOS_SDA_R            0
+
+#define SETDIR_SDA_OUTPUT       1
+#define SETDIR_SDA_INPUT        0
+
+#define DRIVER_ALGO_BIT_UDELAY  20
+
+struct litex_i2c {
+	void __iomem              *reg_w;
+	void __iomem              *reg_r;
+	struct i2c_adapter        adapter;
+	struct i2c_algo_bit_data  algo_data;
+};
+
+/* Helper functions */
+
+static inline void litex_set_bit(void __iomem *mem, int bit, int val)
+{
+	u32 regv, new_regv;
+
+	regv = litex_read8(mem);
+	new_regv = (regv & ~BIT(bit)) | ((!!val) << bit);
+	litex_write8(mem, new_regv);
+}
+
+static inline int litex_get_bit(void __iomem *mem, int bit)
+{
+	u32 regv;
+
+	regv = litex_read8(mem);
+	return !!(regv & BIT(bit));
+}
+
+/* API functions */
+
+static void litex_i2c_setscl(void *data, int state)
+{
+	struct litex_i2c *i2c = (struct litex_i2c *) data;
+
+	litex_set_bit(i2c->reg_w, BITPOS_SCL, state);
+}
+
+static void litex_i2c_setsda(void *data, int state)
+{
+	struct litex_i2c *i2c = (struct litex_i2c *) data;
+
+	litex_set_bit(i2c->reg_w, BITPOS_SDA_DIR, SETDIR_SDA_OUTPUT);
+	litex_set_bit(i2c->reg_w, BITPOS_SDA_W, state);
+}
+
+static int litex_i2c_getsda(void *data)
+{
+	struct litex_i2c *i2c = (struct litex_i2c *) data;
+
+	litex_set_bit(i2c->reg_w, BITPOS_SDA_DIR, SETDIR_SDA_INPUT);
+	return litex_get_bit(i2c->reg_r, BITPOS_SDA_R);
+}
+
+/* Driver functions */
+
+static int litex_i2c_probe(struct platform_device *pdev)
+{
+	struct device_node *node = pdev->dev.of_node;
+	void __iomem *membase;
+	struct litex_i2c *i2c_s;
+	struct resource *res;
+
+	if (!node)
+		return -ENODEV;
+
+	i2c_s = devm_kzalloc(&pdev->dev, sizeof(*i2c_s), GFP_KERNEL);
+	if (!i2c_s)
+		return -ENOMEM;
+
+	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+	if (!res)
+		return -EBUSY;
+
+	membase = devm_of_iomap(&pdev->dev, node, 0, &res->end);
+	if (IS_ERR_OR_NULL(membase))
+		return -EIO;
+
+	i2c_s->reg_w = membase + OFFSET_REG_W;
+	i2c_s->reg_r = membase + OFFSET_REG_R;
+
+	strncpy(i2c_s->adapter.name, "litex_i2c_adapter",
+		sizeof(i2c_s->adapter.name));
+	i2c_s->adapter.owner        = THIS_MODULE;
+	i2c_s->adapter.algo_data    = &i2c_s->algo_data;
+	i2c_s->adapter.dev.parent   = &pdev->dev;
+	i2c_s->adapter.dev.of_node  = node;
+	i2c_s->algo_data.data       = i2c_s;
+
+	i2c_s->algo_data.setsda  = litex_i2c_setsda;
+	i2c_s->algo_data.setscl  = litex_i2c_setscl;
+	i2c_s->algo_data.getsda  = litex_i2c_getsda;
+	i2c_s->algo_data.getscl  = NULL;
+	i2c_s->algo_data.udelay  = DRIVER_ALGO_BIT_UDELAY;
+	i2c_s->algo_data.timeout = HZ;
+
+	platform_set_drvdata(pdev, i2c_s);
+	return i2c_bit_add_bus(&i2c_s->adapter);
+}
+
+static const struct of_device_id litex_of_match[] = {
+	{.compatible = "litex,i2c"},
+	{},
+};
+
+MODULE_DEVICE_TABLE(of, litex_of_match);
+
+static struct platform_driver litex_i2c_driver = {
+	.driver		= {
+		.name		= "litex-i2c",
+		.of_match_table = of_match_ptr(litex_of_match)
+	},
+	.probe		= litex_i2c_probe,
+};
+
+module_platform_driver(litex_i2c_driver);
+
+MODULE_DESCRIPTION("LiteX bitbang I2C Bus driver");
+MODULE_AUTHOR("Antmicro <www.antmicro.com>");
-- 
2.43.0

